#!/usr/bin/python3.6 -W ignore::DeprecationWarning
# suppress depreciation warnings from gtk, might not be working right

'''
netscan_gui.py -- the python qt5 ui class generated by pyuic5 
netscan.ui     -- the xml file of the ui from qt designer
net_utils.py   -- the network utility functions called by the gui
main.py        -- instatiates the ui as App() and connects buttons to functions

You can open netscan.ui in qt designer to modify it. Then save it.

-----------------------------------------
To regenerate the python ui class, run: 
    pyuic5 netscan.ui > netscan_gui.py
-----------------------------------------

The arp scan uses scapy module and main.py needs to be run as root.
Otherwise will ignore.
'''

import warnings
with warnings.catch_warnings():
    warnings.filterwarnings("ignore",category=DeprecationWarning)
    import sys
    from PyQt5 import QtCore, QtWidgets, QtGui, uic    
    from PyQt5.QtWidgets import QApplication,QMainWindow
    from netscan_gui import Ui_MainWindow as Ui_Scanner
    from net_utils import all_interfaces, arp_scan
        
class App(QMainWindow,Ui_Scanner):
    def __init__(self):
        # Instatiate the parent type to inherit methods
        super(App, self).__init__()
        
        # Since App is a subtype of Ui_MainWindow()
        # can call setupUi() directly.
        self.setupUi(self)

        # Fix Menu > Exit to doExit()
        self.actionExit.triggered.connect(self.doExit)
        # Fix the 'Scan Interfaces' button to function doScan()
        self.btn_scan.clicked.connect(self.doScan)
        # Fix the 'Arp Scan' button to function doArpScan()
        self.btn_arpscan.clicked.connect(self.doArpScan)
        
    # Scan network hardware interfaces and appends results to a table.
    def doScan(self):
        ifaces = all_interfaces()
        nfaces = len(ifaces)
        self.table_ifaces.setRowCount(nfaces)
        for n in range(0,nfaces):
            item = QtWidgets.QTableWidgetItem(str(ifaces[n][0]))
            self.table_ifaces.setItem(n,0,item)
            item = QtWidgets.QTableWidgetItem(str(ifaces[n][1]))
            self.table_ifaces.setItem(n,1,item)
        return

    # Does arp scan and appends results to a table.
    def doArpScan(self):
        try:
            arps = arp_scan()
            nfaces = len(arps)
            self.table_arp.setRowCount(nfaces)
            for n in range(0,nfaces):
                item = QtWidgets.QTableWidgetItem(str(arps[n][0]))
                self.table_arp.setItem(n,0,item)
                item = QtWidgets.QTableWidgetItem(str(arps[n][1]))
                self.table_arp.setItem(n,1,item)
        except PermissionError:
            print("Error: Permission denied")
            print("Need root permissions for scapy modules")
            return
        return

    def doExit(self):
        print("Exiting.")
        QApplication.quit()
        
def main():
    print("App is running.")
    return
    
if __name__ == "__main__":
    app = QApplication(sys.argv)
    window = App()
    window.show()
    main()
    sys.exit(app.exec_())


